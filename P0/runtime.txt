Note: I keep getting reviewers saying my runtime is wrong. However, I believe that since adding an item to a set,
and checking if an item exists in a dict have a linear worst case run time due to hashing collision, my time complexities
should be correct. Here is a reference I am using for time complexity: https://wiki.python.org/moin/TimeComplexity.
I tried to reword my analysis to make them clearer, but if I am mistaken about the above assumption, please let me know.

Task 0 Analysis:
For accessing the first element of texts, and the last element of calls, we do not need to traverse the list,
so the task runs in O(1).

Task 1 Analysis:
We need to loop over both calls and texts and attempt to add them to our set, which will not allow us to take duplicates.
Looping over our data has a linear run time. When using using set operations in Python, they are implemented in a hash
table. This would give us an constant average run time for adding an item, but a linear worst run time. Therefore,
we have a worst case runtime of O(n^2)

Task 2 Analysis:
In our implementation, we first loop over all of our calls and accumulate the time spent on the phone. Then, we loop over
the accumulated data to find who spent the most time on the phone. Since we are using a dictionary, any
time we check to see if an item exists, it will use hashing which has constant time in the average cause, but linear time
in the worst case, so we end up with O(n^2).

Task 3 Analysis:
In this problem we first loop over our data to simultaneously get the numbers of all people called from Bangalore,
while counting the total numbers called to and from Bangalore. Adding to our set will have a worst case runtime of n,
which, since it is contained in a loop, will give us a O(n^2) for the main part of the algorithm.
Finally, we sort the numbers as requested, which takes n log n time. The longest part of our algorithm has an O(n^2).

Task 4 Analysis:
For our final problem, we first loop through all of the calls, creating a list of possible telemarketers. Then, we loop
once again through calls, to see if the person who was called is in our list of possible telemarketers, and if so,
we remove them. We do something similar with texts; looping over, and checking to see if our possible telemarketers has
sent or received any texts. All of these checks have a constant average time due to hashing, but at worst linear time.
Finally, we sort our results and and print them, which is n log n. All of this together gives us a runtime of O(n^2).