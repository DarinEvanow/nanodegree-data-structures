Task 0 Analysis:
For accessing the first element of texts, and the last element of calls, we do not need to traverse the list,
so the task runs in O(1).

Task 1 Analysis:
We need to loop over both calls and texts and attempt to add them to our set, which will not allow us to take duplicates.
Since we are are looping over our data, and sets using hashing to check or uniqueness when adding we have an average runtime of
of n, but since checking if an item exists in a set can have a worst case run time of n, we have a runtime of O(n^2).

Task 2 Analysis:
In our implementation, we first loop over all of our calls and accumulate the time spent on the phone. Then, we loop over
the accumulated data to find who spent the most time on the phone. Since we are using a dictionary, any
time we check to see if an item exists, it will use hashing which is constant time in the average cause, but linear time in the worst case,
we have a runtime of O(n^2).

Task 3 Analysis:
In this problem we first loop over our data to simultaneously get the numbers of all people called from Bangalore,
while counting the total numbers called to and from Bangalore. Adding to our set will have a worst case runtime of n,
which, being contained in a loop, will give us a O(n^2) for the main part of the algorithm.
Finally, we sort the numbers as requested, which takes n log n time. The longest part of our algorithm has an O(n^2).

Task 4 Analysis:
For our final problem, we first loop through all of the calls, creating a list of possible telemarketers. Then, we loop
once again through calls, to see if the person who was called is in our list of possible telemarketers, and if so,
we remove them. We do something similar with texts; looping over, and checking to see if our possible telemarketers has
sent or received any texts. All of these checks are done have a constant average time, but a worst quadrtic time. Finally, we sort our results
and and print them, which is n log n. All of this together gives us a runtime of O(n^2).